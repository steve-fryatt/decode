REM >!Master
REM
REM Copyright 1993-2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Master:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:WimpSprite"
LIBRARY "BASIC:Window"

PROCwimperror_initialise("Master", "!master")
ON ERROR result% = FNwimperror_program : END

REM These values get replaced by tokenize.

build_version$ = "1.10"
build_date$ = "01 Jul 2009"

PROCinitialise

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCpoll
ENDWHILE

SYS "Wimp_CloseDown"
END


REM Handle calls to Wimp_Poll and process the responses.
:
DEF PROCpoll
LOCAL reason%

SYS "Wimp_Poll", &3C01, b% TO reason%

CASE reason% OF
	WHEN 2		: SYS "Wimp_OpenWindow",,b%
	WHEN 3		: SYS "Wimp_CloseWindow",,b%
	WHEN 6		: PROCmouse_click(b%!12, b%!16, b%!8)
	WHEN 7		: PROCdrag_end
	WHEN 9		: PROCmenu_selection(b%)
	WHEN 17, 18	: PROCuser_message(b%)
 	WHEN 19		: IF b%!16 = &4AF80 THEN PROCurl_bounce(b%)
ENDCASE
ENDPROC


REM Process mouse clicks in windows.
REM
REM \param window%	The window under the mouse.
REM \param icon%	The icon under the mouse.
REM \param buttons%	The buttons involved in the selection.
:
DEF PROCmouse_click(window%, icon%, button%)
CASE window% OF
WHEN -2
	CASE button% OF
	WHEN 2
		PROCmenu_create_iconbar(IconbarMenu%, !b%)
	WHEN 4
		PROCwindow_open(MainWindow%)
	ENDCASE

WHEN MainWindow%
	CASE button% OF
	WHEN 64
		PROCdrag_peg(icon%)

	WHEN 4
		IF icon% >= 123 AND icon% <= 134 AND DragsEnabled% THEN PROCscore_current_line

	WHEN 2
		PROCmenu_create(MainMenu%, !b%, b%!4)
	ENDCASE

WHEN InfoWindow%
	IF button% = 4 AND icon% = 8 THEN
		PROCurl_launch(FNmessage_lookup("SupportURL"))
		PROCmenu_create(-1,0,0)
	ENDIF
ENDCASE
ENDPROC


REM Process selections from menus.
REM
REM \param		The menu selection block.
:
DEF PROCmenu_selection(block%)
LOCAL reopen%

SYS "Wimp_GetPointerInfo",,q%
reopen% = (q%!8 = 1)

CASE FNmenu_current_handle OF
WHEN MainMenu%
	CASE !block% OF
	WHEN 0
		PROCnew_game
	ENDCASE

WHEN IconbarMenu%
	CASE !block% OF
		WHEN 1	: OSCLI("%Filer_Run <Master$Dir>.!Help")
		WHEN 2	: SolidDrags% = NOT SolidDrags% : PROCmenu_set_state(IconbarMenu%, 2, SolidDrags%, FALSE)
		WHEN 3	: Quit% = TRUE
	ENDCASE
ENDCASE

IF reopen% THEN PROCmenu_create(FNmenu_current_handle, 0, 0)
ENDPROC


REM Process incoming user messages.
REM
REM \param		The user message block.
:
DEF PROCuser_message(block%)
CASE block%!16 OF
	WHEN 0		: Quit% = TRUE
	WHEN &502	: PROCsend_interactive_help(b%)
	WHEN &4E383	: PROCurl_bounce(b%)
ENDCASE
ENDPROC


REM Process requests for interactive help text.
REM
REM \param message%		Pointer to the Message_HelpRequest block.
:
DEF PROCsend_interactive_help(message%)
LOCAL root$, suffix$, found%, message$

REM Compare the window handle to the windows we know about, and find the
REM relevant token name.

CASE message%!32 OF
	WHEN -2			: root$ = "IconBar"
	WHEN MainWindow%	: root$ = "Main"
	WHEN InfoWindow%	: root$ = "Info"
	OTHERWISE		: root$ = ""
ENDCASE

REM Look up the help text, either as a window message or by checking the
REM menus that belong to us.

IF root$ <> "" THEN
	suffix$ = FNicon_validation_command(message%!32, message%!36, "N")

	REM If there's a name in the validation string, use that; otherwise
	REM check to see if there's a special case to set up.

	IF suffix$ <> "" THEN
		root$ += "." + suffix$
	ELSE
		IF message%!32 = MainWindow% THEN
			CASE TRUE OF
				WHEN message%!36 >= 0 AND message%!36 <= 9	: root$ += ".Pool"
				WHEN message%!36 >= 10 AND message%!36 <= 57	: root$ += ".Guess"
				WHEN message%!36 >= 58 AND message%!36 <= 105	: root$ += ".Mark"
				WHEN message%!36 >= 123 AND message%!36 <= 134	: root$ += ".Process"
			ENDCASE
		ENDIF
	ENDIF
	found% = FNmessage_lookup_result("Help." + root$, message$)
ELSE
	SYS "Wimp_GetMenuState", 1, q%, message%!32, message%!36
	CASE FNmenu_current_handle OF
		WHEN MainMenu%		: root$ = "MainMenu." + RIGHT$("00" + STR$(!q%), 2)
		WHEN IconbarMenu%	: root$ = "IconBarMenu." + RIGHT$("00" + STR$(!q%), 2)
	ENDCASE
	
	IF root$ <> "" THEN found% = FNmessage_lookup_result("Help." + root$, message$)
ENDIF

REM If no message was found, give up now.

IF NOT found% THEN ENDPROC

REM If a message was found, send it back to the requestor.

message%!12 = message%!8
message%!16 = &503
$(message% + 20) = message$ + CHR$(0)
!message% = 24+(LEN(message$) AND &FFFFFC)
SYS "Wimp_SendMessage", 17, message%, message%!4
ENDPROC


REM Start to drag a peg from either the top bar or a guess row.
REM
REM \param icon%		The icon containing the peg to be dragged.
:
DEF PROCdrag_peg(icon%)
IF icon% < 0 OR icon% > 57 OR NOT DragsEnabled% THEN ENDPROC
IF FNget_guess_peg_colour(icon%) = -1 THEN ENDPROC

CASE TRUE OF
WHEN icon% >= 0 AND icon% <= 9
	PROCstart_drag(icon%)
	DragColour% = icon%
	DragFrom% = -1

WHEN icon% >= 10 AND icon% <= 57
	PROCstart_drag(icon%)
	DragColour% = FNget_guess_peg_colour(icon%)
	DragFrom% = icon%
	IF DragFrom% >= ValidDropIcons% AND SolidDrags% THEN PROCset_guess_peg_colour(DragFrom%, -1)
ENDCASE
ENDPROC


REM Start to drag the peg from an icon.
REM
REM \param icon%		The icon to be dragged.
:
DEF PROCstart_drag(icon%)
LOCAL ox%, oy%, x1%, y1%, x2%, y2%, sprite$

REM Check that the icon is in the valid range.

IF icon% < 0 OR icon% > 57 THEN ENDPROC

REM Set up the dragging parameters.

sprite$ = $FNicon_indirection(MainWindow%, icon%)

!q% = MainWindow%
SYS "Wimp_GetWindowState",,q%

ox% = q%!4 - q%!20
oy% = q%!16 - q%!24
x1% = q%!4
y1% = q%!8
x2% = q%!12
y2% = q%!16

q%!4 = icon%
SYS "Wimp_GetIconState",,q%

q%!4 = 5
q%!8 = ox% + q%!8
q%!12 = oy% + q%!12
q%!16 = ox% + q%!16
q%!20 = oy% + q%!20
q%!24 = x1%
q%!28 = y1%
q%!32 = x2%
q%!36 = y2%

REM Start the drag.

IF DragASpriteStart% <> -1 AND SolidDrags% THEN
	SYS "DragASprite_Start", %00100101, SpriteArea%, sprite$, q%+8, q%+24
ELSE
	SYS "Wimp_DragBox",,q%
ENDIF
ENDPROC


REM Process a Drag End event.
:
DEF PROCdrag_end
IF DragASpriteStop% <> -1 AND SolidDrags% THEN SYS "DragASprite_Stop"

REM Find the end of the drag and process it.

SYS "Wimp_GetPointerInfo",,q%
IF q%!12 = MainWindow% THEN PROCdrop_peg(q%!16)
ENDPROC


REM Try to place a peg at the end of a drag.
REM
REM \param icon%		The icon to place the peg in.
:
DEF PROCdrop_peg(icon%)

IF icon% >= ValidDropIcons% AND icon% <= 57 THEN PROCset_guess_peg_colour(icon%, DragColour%)

IF DragFrom% >= ValidDropIcons% AND DragFrom% <> icon% AND NOT SolidDrags% THEN PROCset_guess_peg_colour(DragFrom%, -1)	

PROCset_score_button(CurrentLine%, FNget_guess <> -1)
ENDPROC


REM Score the current line of pegs.
:
DEF PROCscore_current_line
LOCAL guess%, hits%, near%

REM Get the guess from the playing line, and exit with an error if the line
REM isn't complete.

guess% = FNget_guess

IF guess% = -1 THEN PROCwimperror_report(FNmessage_lookup("NotComplete"), 1, %01, "") : ENDPROC

REM Calculate the scores, and update the display.

PROCscore(guess%, TargetValue%, near%, hits%)

PROCplot_score_line(CurrentLine%, 1, 0, hits%)
PROCplot_score_line(CurrentLine%, 0, hits%, near%)

REM Move on to the next line.

PROCset_score_button(CurrentLine%, FALSE)

ValidDropIcons% += 4
CurrentLine% += 1

IF CurrentLine% <= 12 THEN PROChighlight_line(CurrentLine%)

REM Work out if the game has been won or lost.

IF hits% = 4 THEN
	PROCend_game("Correct")
ELSE
	IF CurrentLine% = 13 THEN PROCend_game("Slow")
ENDIF
ENDPROC


REM Get the guess from the current line of pegs.
REM
REM \return			The current guess, or -1 if the line is incomplete.
:
DEF FNget_guess
LOCAL sequence$, i%, fail%, peg%

fail% = FALSE

FOR i% = 0 TO 3
	peg% = FNget_guess_peg_colour(ValidDropIcons% + i%)
	IF peg% <> -1 THEN sequence$ += STR$(peg%) ELSE fail% = TRUE
NEXT i%

IF fail% THEN =-1
=VAL(sequence$)


REM Score a guess against a taret sequence.
REM
REM \param guess%		The guess to be scored.
REM \param target%		The target to score against.
REM \param near%		Return the number of near hits.
REM \param hits%		Return the number of direct hits.
:
DEF PROCscore(guess%, target%, RETURN near%, RETURN hits%)
LOCAL i%, j%

near% = 0
hits% = 0

FOR i% = 1 TO 4
	FOR j% = 1 TO 4
		IF FNin(guess%, i%) = FNin(target%, j%) THEN
			IF i% = j% THEN hits% += 1 ELSE near% += 1
		ENDIF
	NEXT j%
NEXT i%
ENDPROC


REM Return a digit from a sequence number.
REM
REM \param number%		The number to break up.
REM \param position%		The position to return the value from.
REM \return			The value in the specified position.
:
DEF FNin(number%, position%)
LOCAL number$

number$ = RIGHT$("0000" + STR$(number%), 4)
=VAL(MID$(number$, position%, 1))


REM Start a new game.
:
DEF PROCnew_game
LOCAL peg%

REM Pick a new target.

TargetValue% = FNnew_target

REM Reset the global variables.

ValidDropIcons% = 10
CurrentLine% = 1
DragsEnabled% = TRUE

REM Update the game board display.

FOR peg%=10 TO 57
	PROCset_guess_peg_colour(peg%, -1)
NEXT peg%

FOR peg%=58 TO 105
	PROCset_score_peg_colour(peg%, -1)
NEXT peg%

FOR peg%=0 TO 9
	PROCset_guess_peg_colour(peg%, peg%)
NEXT peg%

PROCdisplay_message("Guess")
PROChighlight_line(1)
ENDPROC


REM Generate a new target value, of four digits with no repeats.
REM
REM \return			The new target value.
:
DEF FNnew_target
LOCAL target%, hits%, near%

REPEAT
	target% = RND(9999)
	PROCscore(target%, target%, near%, hits%)
UNTIL near% = 0
=target%


REM End a game, updating the display and showing a message to the user.
REM
REM \param message$		The token for the message to display.
:
DEF PROCend_game(message$)
LOCAL i%

REM Display the message to the user.

PROCdisplay_message(message$)

REM Reveal the game target in the top row of the board.

FOR i% = 0 TO 2
	PROCset_guess_peg_colour(i%, -1)
NEXT i%
FOR i% = 3 TO 6
	PROCset_guess_peg_colour(i%, FNin(TargetValue%, i% - 2))
NEXT i%
FOR i% = 7 TO 9
	PROCset_guess_peg_colour(i%, -1)
NEXT i%

REM Reset the row numbers to black.

FOR i% = 107 TO 118
	PROCicon_set_colours(MainWindow%, i%, 7, 1)
NEXT i%

REM Update the scores.

PROCset_new_score(CurrentLine%-1)

REM Disable dragging until the next game starts.

DragsEnabled%=FALSE
ENDPROC


REM Plot a sequence of scoring pegs on a line.
REM
REM \param line%		The line to plot.
REM \param colour%		The score peg colour to plot.
REM \param start%		The offset for the first peg.
REM \param pegs%		The number of pegs to place.
:
DEF PROCplot_score_line(line%, colour%, start%, pegs%)
LOCAL index%, icon%

REM If there are no pegs, there's nothing to do.

IF pegs% = 0 THEN ENDPROC

REM Find the first icon in the row, then plot the required pegs.

index% = 58 + ((line% - 1) * 4) + start%

FOR icon% = index% TO index% + pegs% - 1
	PROCset_score_peg_colour(icon%, colour%)
NEXT icon%
ENDPROC


REM Highlight a row number in the guess grid, un-highlighting the previous line
REM if not the first.
REM
REM \param line%		The line to highlight.
:
DEF PROChighlight_line(line%)
IF line% < 1 OR line% > 12 THEN ENDPROC

IF line% > 1 THEN PROCicon_set_colours(MainWindow%, line% + 105, 7, 1)
PROCicon_set_colours(MainWindow%, line% + 106, 11, 1)
ENDPROC


REM Show or hide a score button.
REM
REM \param line%		The line to update.
REM \param show%		TRUE to show the button; FALSE to hide it.
:
DEF PROCset_score_button(line%, show%)
PROCicon_set_deleted(MainWindow%, 122 + line%, NOT show%)
PROCicon_redraw(MainWindow%, 122 + line%)
ENDPROC


REM Set the colour of a larger guessing peg.
REM
REM \param icon%		The icon in the window to set (0 to 57).
REM \param colour%		The peg "colour" (-1 for empty, else 0 to 9).
:
DEF PROCset_guess_peg_colour(icon%, colour%)
LOCAL sprite$

IF icon% < 0 OR icon% > 57 THEN ENDPROC
IF colour% = -1 THEN sprite$ = "ph" ELSE sprite$ = "p" + STR$(colour%)
PROCicon_set_indirected_text(MainWindow%, icon%, sprite$)
PROCicon_redraw(MainWindow%, icon%)
ENDPROC


REM Return the "colour" of a guess peg, given its icon number.
REM
REM \param icon%		The icon of interest (58 ro 105).
REM \return			The peg colour (0 to 9) or -1 for empty.
:
DEF FNget_guess_peg_colour(icon%)
LOCAL sprite$

IF icon% < 0 OR icon% >= 58 THEN =-1
sprite$ = $FNicon_indirection(MainWindow%, icon%)
IF LEFT$(sprite$, 1) <> "p" OR sprite$ = "ph" THEN =-1
=VAL(MID$(sprite$, 2))


REM Set the colour of a smaller scoring peg.
REM
REM \param icon%		The icon in the window to set (58 to 105).
REM \param colour%		The peg "colour" (-1 for empty, 0 for white,
REM				1 for black).
:
DEF PROCset_score_peg_colour(icon%, colour%)
LOCAL sprite$

IF icon% < 58 OR icon% > 105 THEN ENDPROC
CASE colour% OF
	WHEN 0		: sprite$ = "s0"
	WHEN 1		: sprite$ = "s1"
	OTHERWISE	: sprite$ = "sh"
ENDCASE
PROCicon_set_indirected_text(MainWindow%, icon%, sprite$)
PROCicon_redraw(MainWindow%, icon%)
ENDPROC


REM Display a message in the status field at the top of the window.
REM
REM \param token$		The message token for the message to display.
:
DEF PROCdisplay_message(token$)
PROCicon_set_indirected_text(MainWindow%, 106, FNmessage_lookup(token$))
PROCicon_redraw(MainWindow%, 106)
ENDPROC


REM Set a new score, updating the high score if that's beaten.
REM
REM \param new_score%		The new score to set.
:
DEF PROCset_new_score(new_score%)
LastScore% = new_score%
IF LastScore% < HighScore% THEN HighScore% = LastScore%
PROCicon_set_indirected_text(MainWindow%, 119, STR$(LastScore%))
PROCicon_set_indirected_text(MainWindow%, 121, STR$(HighScore%))
PROCicon_redraw(MainWindow%, 119)
PROCicon_redraw(MainWindow%, 121)
ENDPROC


REM Initialise ourselves, internally and with the Wimp.
:
DEF PROCinitialise
LOCAL resources$, task_name$, task_sprite$, indirected_data%, indirected_size%, ibar_icon%, time%

REM Set up the quit flag and global data blocks.

Quit% = FALSE

DIM b% 5000, q% 255, a% 255

REM Locate the application resources.

resources$ = FNresources_find_territory_folder("<Master$Dir>.Resources")

REM Load the messages file.

PROCmessage_initialise(resources$ + "Messages")

task_name$ = FNmessage_lookup("TaskName")
task_sprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$, task_sprite$)

REM Initialise with the Wimp.

q%!0 = &502
q%!4 = &4E383
q%!8 = &4AF80
q%!12 = 0

SYS "Wimp_Initialise", 310, &4B534154, task_name$, q%

REM Load the application sprites.

SpriteArea% = FNwimpsprite_load_user_sprites("<Master$Dir>.SpriteFile")

REM Load the window templates.

indirected_size% = 2048
DIM indirected_data% indirected_size%

PROCtemplate_open(resources$ + "Templates")
PROCtemplate_load("Board", b%, indirected_data%, indirected_size%, -1)
b%!64 = SpriteArea%
FOR i% = 0 TO 105
	b%!(88 + 32*i% + 24) = SpriteArea%
NEXT i%
FOR i% = 123 TO 134
	b%!(88 + 32*i% + 24) = SpriteArea%
NEXT i%
SYS "Wimp_CreateWindow",,b% TO MainWindow%
PROCtemplate_load("ProgInfo", b%, indirected_data%, indirected_size%, -1)
SYS "Wimp_CreateWindow",,b% TO InfoWindow%
PROCtemplate_close

$FNicon_indirection(InfoWindow%, 4) = CHR$(169) + " Stephen Fryatt, 1993-" + MID$(build_date$, 8)
$FNicon_indirection(InfoWindow%, 6) = build_version$ + " (" + build_date$ + ")"

REM Initialise and load the menu templates.

PROCmenu_initialise

b%!0 = InfoWindow%
PROCmenu_load_templates(resources$ + "Menus", b%)
IconbarMenu% = b%!0
MainMenu% = b%!4

REM Initialise the dragging system.

SolidDrags%=FALSE

PROCdrag_init

IF DragASpriteStart% = -1 THEN
	PROCmenu_set_state(IconbarMenu%, 2, FALSE, TRUE)
ELSE
	PROCmenu_set_state(IconbarMenu%, 2, TRUE, FALSE)
	SolidDrags% = TRUE
ENDIF

REM Set up the scores.

LastScore%=12
HighScore%=12

PROCset_new_score(12)

REM Randomly seed RND() then create a new playing board.

SYS "OS_ReadMonotonicTime" TO time%
IF time% >= 0 THEN time% = &FFFFFFFF - time%
time% = RND(time%)

PROCnew_game

REM Put us on to the iconbar.

ibar_icon% = FNicon_create_standard_bar(-1, task_sprite$)
ENDPROC


REM Initialise the solid dragging.
:
DEF PROCdrag_init
LOCAL cmos%

DragASpriteStart% = FNlookup_swi_number("DragASprite_Start")
DragASpriteStop% = FNlookup_swi_number("DragASprite_Stop")

SYS "OS_Byte", 161, 28 TO ,,cmos%
IF (cmos% AND 2) = 0 THEN
	DragASpriteStart% = -1
	DragASpriteStop% = -1
ENDIF
ENDPROC


REM Given a SWI name, look up its number.
REM
REM \param swi$			The name of the SWI to look up.
REM \return			The corresponding number, or -1 if not found.
:
DEF FNlookup_swi_number(swi$)
LOCAL swi%

SYS "XOS_SWINumberFromString",,swi$ TO swi% ;flag%
IF (flag% AND 1) = 1 THEN =-1
=swi%

